##!/usr/bin/python
#
## populate resource.h with tags for resource filenames and ids based on images in ../resources/img
#
#import os, sys, fileinput, string
#scriptpath = os.path.dirname(os.path.realpath(__file__))
#projectpath = os.path.abspath(os.path.join(scriptpath, os.pardir))
#
#process_resource = False;
#
#def main():
#
#  if(process_resource):
#    resource_h = open(projectpath + "/resource.h", "w")
#
#    FILES = os.listdir(projectpath + "/resources/img/")
#
#    PNG_FILES = []
#    for file in FILES:
#      if file.endswith(".png"):
#          PNG_FILES.append(os.path.splitext(file)[0])
#
#    resource_h.write("// THIS FILE WAS AUTO-GENERATED BY make_resource.py\n")
#    resource_h.write("// BEGIN_IDS\n")
#    idx = 100;
#    for png in PNG_FILES:
#      resource_h.write("#define " + png + "_ID " + str(idx) + "\n")
#      idx += 1
#
#    resource_h.write("// END_IDS\n")
#
#    resource_h.write("// BEGIN_FILENAMES\n")
#    idx = 100;
#    for png in PNG_FILES:
#      resource_h.write("#define " + png + "_FN \"" + png + ".png\"\n")
#      idx += 1
#
#    resource_h.write("// END_FILENAMES\n")
#
##   resource_h.write("// BEGIN_FRAMES\n")
##   for png in PNG_FILES:
##     resource_h.write("#define " + png + "_FR\n")
##
##   resource_h.write("// END_FRAMES\n")
#
#
#  #for png in PNG_FILES:
#  #  print "IBitmap " + png + " = pGraphics->LoadIBitmap(" + png + "_ID, " + png + "_FN, " + png + "_FR);"
#
#  #close? resource_h
#
#
#  print "Processing Windows resource file..."
#
#  MajorStr = ""
#  MinorStr = ""
#  BugfixStr = ""
#
#  BUNDLE_MFR = ""
#  BUNDLE_NAME = ""
#  PLUG_NAME_STR = ""
#  PLUG_MFR_NAME_STR = ""
#  PLUG_CHANNEL_IO = ""
#  PLUG_COPYRIGHT = ""
#  PLUG_TRADEMARKS = ""
#  PLUG_UID = ""
#  PLUG_MFR_UID = ""
#  PLUG_TYPE = 0
#
#  # extract values from resource.h
#  for line in fileinput.input(projectpath + "/resource.h",inplace=0):
#    if "#define PLUG_VER " in line:
#      PLUG_VER_STR = string.lstrip(line, "#define PLUG_VER ")
#      PLUG_VER = int(PLUG_VER_STR, 16)
#      MAJOR = PLUG_VER & 0xFFFF0000
#      MAJORSTR = str(MAJOR >> 16)
#      MINOR = PLUG_VER & 0x0000FF00
#      MINORSTR = str(MINOR >> 8)
#      BUGFIXSTR = str(PLUG_VER & 0x000000FF)
#
#    if "#define BUNDLE_MFR " in line:
#      BUNDLE_MFR = string.lstrip(line, "#define BUNDLE_MFR ")
#
#    if "#define BUNDLE_NAME " in line:
#      BUNDLE_NAME = string.lstrip(line, "#define BUNDLE_NAME ")
#
#    if "#define PLUG_NAME_STR " in line:
#      PLUG_NAME_STR = string.lstrip(line, "#define PLUG_NAME_STR ")
#
#    if "#define PLUG_MFR_NAME_STR " in line:
#      PLUG_MFR_NAME_STR = string.lstrip(line, "#define PLUG_MFR_NAME_STR ")
#
#    if "#define PLUG_CHANNEL_IO " in line:
#      PLUG_CHANNEL_IO = string.lstrip(line, "#define PLUG_CHANNEL_IO ")
#
#    if "#define PLUG_COPYRIGHT " in line:
#      PLUG_COPYRIGHT = string.lstrip(line, "#define PLUG_COPYRIGHT ")
#
#    if "#define PLUG_TRADEMARKS " in line:
#      PLUG_TRADEMARKS = string.lstrip(line, "#define PLUG_TRADEMARKS ")
#
#    if "#define PLUG_UID " in line:
#      PLUG_UID = string.lstrip(line, "#define PLUG_UID ")
#
#    if "#define PLUG_MFR_UID " in line:
#      PLUG_MFR_UID = string.lstrip(line, "#define PLUG_MFR_UID ")
#
#    if "#define PLUG_TYPE " in line:
#      PLUG_TYPE = int(string.lstrip(line, "#define PLUG_TYPE "), 16)
#
#  FULLVERSIONSTR = MAJORSTR + "." + MINORSTR + "." + BUGFIXSTR
#
#  #strip quotes and newlines
#  PLUG_VER_STR = PLUG_VER_STR[0:-1]
#  BUNDLE_MFR = BUNDLE_MFR[1:-2]
#  BUNDLE_NAME = BUNDLE_NAME[1:-2]
#  PLUG_NAME_STR = PLUG_NAME_STR[1:-2]
#  PLUG_MFR_NAME_STR = PLUG_MFR_NAME_STR[1:-2]
#  PLUG_CHANNEL_IO = PLUG_CHANNEL_IO[1:-2]
#  PLUG_COPYRIGHT = PLUG_COPYRIGHT[1:-2]
#  PLUG_TRADEMARKS = PLUG_TRADEMARKS[1:-2]
#  PLUG_MFR_UID = PLUG_MFR_UID[1:-2]
#  PLUG_UID = PLUG_UID[1:-2]
#
#  rc = open(projectpath + "/" + BUNDLE_NAME + ".rc", "w")
#
#  rc.write("// THIS FILE WAS AUTO-GENERATED BY make_resource.py\n")
#  rc.write("#include <windows.h>\n")
#  rc.write('#include "resource.h"\n')
#  rc.write("#define APSTUDIO_READONLY_SYMBOLS\n")
#  rc.write("\n")
#
#  # write part of rc file for app
#  rc.write("//Standalone stuff\n")
#  rc.write("#ifdef SA_API\n")
#  rc.write('#include "app_resource.h"\n')
#  rc.write("\n")
#  rc.write("IDI_ICON1                ICON    DISCARDABLE     \"resources\\" + BUNDLE_NAME + ".ico\"\n")
#  rc.write("\n")
#  rc.write("IDD_DIALOG_MAIN DIALOG DISCARDABLE  0, 0, GUI_WIDTH, GUI_HEIGHT\n")
#  rc.write("STYLE DS_MODALFRAME | DS_CENTER | WS_POPUP | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX\n")
#  rc.write("CAPTION \"" + BUNDLE_NAME + "\"\n")
#  rc.write("MENU IDR_MENU1\n")
#  rc.write("FONT 8, \"MS Sans Serif\"\n")
#  rc.write("BEGIN\n")
#  rc.write("//   EDITTEXT        IDC_EDIT1,59,50,145,14,ES_AUTOHSCROLL\n")
#  rc.write("//   LTEXT           \"Enter some text here:\",IDC_STATIC,59,39,73,8\n")
#  rc.write("END\n")
#  rc.write("\n")
#  rc.write("LANGUAGE LANG_NEUTRAL, SUBLANG_NEUTRAL\n")
#  rc.write("IDD_DIALOG_PREF DIALOG DISCARDABLE 0, 0, 223, 309\n")
#  rc.write("STYLE DS_3DLOOK | DS_CENTER | DS_MODALFRAME | DS_SHELLFONT | WS_CAPTION | WS_VISIBLE | WS_POPUP | WS_SYSMENU\n")
#  rc.write("CAPTION \"Preferences\"\n")
#  rc.write("FONT 8, \"MS Sans Serif\"\n")
#  rc.write("{\n")
#  rc.write("    DEFPUSHBUTTON   \"OK\", IDOK, 110, 285, 50, 14\n")
#  rc.write("    PUSHBUTTON      \"Apply\", IDAPPLY, 54, 285, 50, 14\n")
#  rc.write("    PUSHBUTTON      \"Cancel\", IDCANCEL, 166, 285, 50, 14\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_DRIVER, 20, 35, 100, 100, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Driver Type\", IDC_STATIC, 22, 25, 38, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_IN_DEV, 20, 65, 100, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Input Device\", IDC_STATIC, 20, 55, 42, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_OUT_DEV, 20, 95, 100, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Output Device\", IDC_STATIC, 20, 85, 47, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_IOVS, 135, 35, 65, 100, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"IO Vector Size\", IDC_STATIC, 137, 25, 46, 8, SS_LEFT\n")
#  #rc.write("    COMBOBOX        IDC_COMBO_AUDIO_SIGVS, 135, 65, 65, 100, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  #rc.write("    LTEXT           \"Signal Vector Size\", IDC_STATIC, 135, 55, 58, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_SR, 135, 95, 65, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Sampling Rate\", IDC_STATIC, 135, 85, 47, 8, SS_LEFT\n")
#  rc.write("    GROUPBOX        \"Audio Device Settings\", IDC_STATIC, 5, 10, 210, 170\n")
#  rc.write("    PUSHBUTTON      \"ASIO Config...\", IDC_BUTTON_ASIO, 135, 155, 65, 14\n")
#  #rc.write("    COMBOBOX        IDC_COMBO_AUDIO_IN_L, 20, 125, 40, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  #rc.write("    LTEXT           \"Input 1 (L)\", IDC_STATIC, 20, 115, 33, 8, SS_LEFT\n")
#  #rc.write("    COMBOBOX        IDC_COMBO_AUDIO_IN_R, 65, 126, 40, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  #rc.write("    LTEXT           \"Input 2 (R)\", IDC_STATIC, 65, 115, 34, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_OUT_L, 20, 155, 40, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Output 1 (L)\", IDC_STATIC, 20, 145, 38, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_AUDIO_OUT_R, 65, 155, 40, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Output 2 (R)\", IDC_STATIC, 65, 145, 40, 8, SS_LEFT\n")
#  rc.write("    GROUPBOX        \"MIDI Device Settings\", IDC_STATIC, 5, 190, 210, 85\n")
#  rc.write("    COMBOBOX        IDC_COMBO_MIDI_OUT_DEV, 15, 250, 100, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Output Device\", IDC_STATIC, 15, 240, 47, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_MIDI_IN_DEV, 15, 220, 100, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Input Device\", IDC_STATIC, 15, 210, 42, 8, SS_LEFT\n")
#  rc.write("    LTEXT           \"Input Channel\", IDC_STATIC, 125, 210, 45, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_MIDI_IN_CHAN, 125, 220, 50, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  rc.write("    LTEXT           \"Output Channel\", IDC_STATIC, 125, 240, 50, 8, SS_LEFT\n")
#  rc.write("    COMBOBOX        IDC_COMBO_MIDI_OUT_CHAN, 125, 250, 50, 200, CBS_DROPDOWNLIST | CBS_HASSTRINGS\n")
#  #rc.write("    AUTOCHECKBOX    \"Mono Input\", IDC_CB_MONO_INPUT, 135, 127, 56, 8\n")
#  rc.write("}\n")
#  rc.write("\n")
#  rc.write("IDR_MENU1 MENU DISCARDABLE\n")
#  rc.write("BEGIN\n")
#  rc.write("  POPUP \"&File\"\n")
#  rc.write("  BEGIN\n")
#  rc.write("//    MENUITEM SEPARATOR\n")
#  rc.write("      MENUITEM \"Preferences...\",              ID_PREFERENCES\n")
#  rc.write("      MENUITEM \"&Quit\",                       ID_QUIT\n")
#  rc.write("  END\n")
#  rc.write("  POPUP \"&Help\"\n")
#  rc.write("  BEGIN\n")
#  rc.write("      MENUITEM \"&About\",                      ID_ABOUT\n")
#  rc.write("      MENUITEM \"&Read Manual\",                ID_HELP\n")
#  rc.write("  END\n")
#  rc.write("END\n")
#  rc.write("\n")
#  rc.write("#endif // SA_API\n")
#  rc.write("\n")
#
#  if(process_resource):
#    for png in PNG_FILES:
#      rc.write(png + "_ID PNG " + png + "_FN\n")
#
#  rc.write("\n")
#  rc.write("/////////////////////////////////////////////////////////////////////////////\n")
#  rc.write("// Version\n")
#  rc.write("/////////////////////////////////////////////////////////////////////////////\n")
#  rc.write("VS_VERSION_INFO VERSIONINFO\n")
#  rc.write("FILEVERSION " + MAJORSTR + "," + MINORSTR + "," + BUGFIXSTR + ",0\n")
#  rc.write("PRODUCTVERSION " + MAJORSTR + "," + MINORSTR + "," + BUGFIXSTR + ",0\n")
#  rc.write(" FILEFLAGSMASK 0x3fL\n")
#  rc.write("#ifdef _DEBUG\n")
#  rc.write(" FILEFLAGS 0x1L\n")
#  rc.write("#else\n")
#  rc.write(" FILEFLAGS 0x0L\n")
#  rc.write("#endif\n")
#  rc.write(" FILEOS 0x40004L\n")
#  rc.write(" FILETYPE 0x1L\n")
#  rc.write(" FILESUBTYPE 0x0L\n")
#  rc.write("BEGIN\n")
#  rc.write('    BLOCK "StringFileInfo"\n')
#  rc.write("    BEGIN\n")
#  rc.write('        BLOCK "040004e4"\n')
#  rc.write("        BEGIN\n")
#  rc.write('            VALUE "FileVersion", "' + FULLVERSIONSTR + '"\0\n')
#  rc.write('            VALUE "ProductVersion", "' + FULLVERSIONSTR + '"0\n')
#  rc.write("#ifdef VST2_API\n")
#  rc.write('            VALUE "OriginalFilename", "' + BUNDLE_NAME + '.dll"\0\n')
#  rc.write("#elif defined VST3_API\n")
#  rc.write('            VALUE "OriginalFilename", "' + BUNDLE_NAME + '.vst3"\0\n')
#  rc.write("#elif defined AAX_API\n")
#  rc.write('            VALUE "OriginalFilename", "' + BUNDLE_NAME + '.aaxplugin"\0\n')
#  rc.write("#elif defined SA_API\n")
#  rc.write('            VALUE "OriginalFilename", "' + BUNDLE_NAME + '.exe"\0\n')
#  rc.write("#endif\n")
#  rc.write('            VALUE "FileDescription", "' + PLUG_NAME_STR + '"\0\n')
#  rc.write('            VALUE "InternalName", "' + PLUG_NAME_STR + '"\0\n')
#  rc.write('            VALUE "ProductName", "' + PLUG_NAME_STR + '"\0\n')
#  rc.write('            VALUE "CompanyName", "' + PLUG_MFR_NAME_STR + '"\0\n')
#  rc.write('            VALUE "LegalCopyright", "' + PLUG_COPYRIGHT + '"\0\n')
#  rc.write('            VALUE "LegalTrademarks", "' + PLUG_TRADEMARKS + '"\0\n')
#  rc.write("        END\n")
#  rc.write("    END\n")
#  rc.write('    BLOCK "VarFileInfo"\n')
#  rc.write("    BEGIN\n")
#  rc.write('        VALUE "Translation", 0x400, 1252\n')
#  rc.write("    END\n")
#  rc.write("END\n")
#  rc.write("\n")
#
#if __name__ == '__main__':
#  main()

